export const projects = [
  {
    name: "EdgeIncidentDrill - AI Incident Response Trainer",
    slug: "edge-incident-drill",
    show: "AI-powered cybersecurity incident response training platform with real-time guidance and voice integration",
    desc: "An intelligent, real-time incident response training and simulation platform that leverages Cloudflare's edge computing capabilities to provide AI-powered guidance during cybersecurity incidents. Features interactive training scenarios, persistent memory, real-time coordination workflows, voice integration for hands-free operation, and edge-first design for ultra-low latency responses.",
    lang: [
      "React",
      "TypeScript",
      "Cloudflare Workers",
      "Llama 3.3 AI",
      "WebSockets",
      "Voice API",
      "Cybersecurity",
    ],
    img: "EdgeIncident.png",
    link: "https://github.com/abdulrahman1121/ai-incident-response-trainer",
    git: "https://github.com/abdulrahman1121/ai-incident-response-trainer",
    problem:
      "Cybersecurity professionals need realistic, hands-on training for incident response scenarios, but traditional training methods are static and don't provide real-time guidance. Teams need AI-powered assistance during actual incidents and comprehensive training platforms that simulate real-world cybersecurity threats with dynamic, interactive scenarios.",
    solution:
      "I built EdgeIncidentDrill as an AI-powered incident response training platform that addresses modern cybersecurity training needs. The system leverages Cloudflare's edge computing and Llama 3.3 AI to provide real-time guidance during training scenarios. Features include interactive training scenarios based on actual cybersecurity incidents, voice integration for hands-free operation, persistent memory for learning patterns, real-time coordination workflows, and edge-first design for ultra-low latency responses. The platform supports multiple training scenarios including malware detection, phishing response, DDoS mitigation, data breaches, and network intrusions.",
  },
  {
    name: "Game Genie - AI Word Game",
    slug: "game-genie",
    show: "Adaptive AI-powered word puzzle game for kids ages 6-13, featuring personalized learning and educational content",
    desc: "An innovative educational word game that combines the fun of Wordle with AI-powered personalization. The game adapts to each child's learning level, providing dynamic difficulty adjustment, built-in definitions, usage practice, and mini-quizzes. Features AI tutor mode with context-based hints and remix mode for creative learning.",
    lang: [
      "React",
      "Vite",
      "Node.js",
      "OpenAI API",
      "CSS Animations",
      "JavaScript",
      "AI/ML",
    ],
    img: "game-genie-gamepage.png",
    link: "https://abdulrahman1121.github.io/game-genie-1/#/",
    git: "https://github.com/abdulrahman1121/game-genie-1",
    problem:
      "Traditional vocabulary games like Wordle are fun but static. They don't adapt to a child's learning level or provide deeper learning support such as definitions, usage examples, or subject relevance. Kids need more engaging, scaffolded ways to build vocabulary across various subjects.",
    solution:
      "I built Game Genie, an adaptive AI word puzzle game that evolves with the player's skills and interests. The game features AI-powered personalization that adjusts word length (4-5 letters) and topics based on performance. It includes built-in definitions, usage practice with sentence unscrambling, synonym/antonym exercises, and mini-quizzes. The AI tutor mode provides context-based hints, and the remix mode lets players create stories and riddles from learned words.",
  },
  {
    name: "Math Pair Game",
    slug: "math-pair-game",
    show: "Engaging web-based puzzle game that enhances mathematical skills through interactive 4x4 grid gameplay",
    desc: "Math Pair Game is an engaging, web-based puzzle game designed to enhance mathematical skills through interactive gameplay. Players match pairs of numbers on a 4x4 grid that satisfy a given mathematical operation (addition, subtraction, multiplication, or division) to reach a target value. Features three difficulty levels, real-time feedback, and a modern responsive UI.",
    lang: [
      "React",
      "Node.js",
      "Express",
      "Tailwind CSS",
      "OpenAI API",
      "JavaScript",
      "Vite",
    ],
    img: "math-game-2.png",
    link: "https://github.com/abdulrahman1121/game-genie-2",
    git: "https://github.com/abdulrahman1121/game-genie-2",
    problem:
      "Many educational games lack engaging gameplay mechanics and fail to provide meaningful mathematical practice. Students need interactive ways to practice math operations that are both fun and educational, with varying difficulty levels to accommodate different skill levels.",
    solution:
      "I built Math Pair Game as a web-based puzzle game that combines entertainment with education. The game features a 4x4 grid where players match number pairs that satisfy mathematical operations to reach target values. With three difficulty levels (Basic, Intermediate, Advanced), real-time visual feedback, and a modern UI built with React and Tailwind CSS, it provides an engaging way to practice math skills. The backend uses Node.js and Express with OpenAI integration for generating valid number pairs.",
  },
  {
    name: "EV Route Optimizer",
    slug: "ev-route-optimizer",
    show: "Tesla-inspired electric vehicle route planning application that optimizes charging stops for long-distance journeys",
    desc: "A comprehensive EV route planning application that automatically calculates optimal charging stops based on your electric vehicle's range. Features real-time charging station data, EV model presets, interactive maps, and custom EV specifications. Built with Spring Boot backend and React frontend for a seamless user experience.",
    lang: [
      "Java",
      "Spring Boot",
      "React",
      "TypeScript",
      "Leaflet",
      "OpenRouteService",
      "OpenChargeMap",
    ],
    img: "Tesla.png",
    link: "https://github.com/abdulrahman1121/ev-route-optimizer",
    git: "https://github.com/abdulrahman1121/ev-route-optimizer",
    problem:
      "Electric vehicle owners face challenges planning long-distance trips due to limited charging infrastructure and range anxiety. Traditional route planning tools don't account for EV-specific needs like charging station availability, charging times, and optimal stop placement based on battery capacity and consumption rates.",
    solution:
      "I built EV Route Optimizer as a Tesla-inspired application that solves EV trip planning challenges. The system uses a greedy algorithm to calculate optimal charging stops, integrates with OpenChargeMap for real-time station data, and provides turn-by-turn directions with polyline data. The Spring Boot backend handles geocoding, routing, and charging station services, while the React frontend offers an intuitive interface with interactive maps and responsive design.",
  },
  {
    name: "Planning Log Analyzer",
    slug: "planning-log-analyzer",
    show: "Root-cause analysis tool for planning/controls logs that computes KPIs, detects anomalies, and generates sharable reports",
    desc: "A comprehensive log analysis tool designed for planning and controls systems. Features KPI computation (latency, path efficiency, jerk spikes, stalls, near-misses), 2D trajectory visualization with timeline controls, automatic anomaly detection with severity levels, and markdown report generation for root-cause analysis.",
    lang: [
      "Python",
      "FastAPI",
      "React",
      "TypeScript",
      "Three.js",
      "Recharts",
      "Data Analysis",
    ],
    img: "planningLog.png",
    link: "https://github.com/abdulrahman1121/planning-log-analyzer",
    git: "https://github.com/abdulrahman1121/planning-log-analyzer",
    problem:
      "Planning and controls systems generate complex logs that are difficult to analyze manually. Engineers need tools to quickly identify performance issues, detect anomalies, and understand root causes of system failures or inefficiencies in autonomous systems.",
    solution:
      "I built Planning Log Analyzer as a comprehensive root-cause analysis tool. The system processes JSON/CSV planning logs to compute key performance indicators, visualize 2D trajectories with interactive timeline controls, and automatically detect anomalies with severity classification. The FastAPI backend handles log processing and analysis, while the React frontend provides intuitive visualization and report generation capabilities.",
  },
  {
    name: "Microservice Healthboard",
    slug: "microservice-healthboard",
    show: "Real-time monitoring dashboard for microservices with fault injection, SLO tracking, and burn rate monitoring",
    desc: "A comprehensive microservice monitoring and observability platform featuring real-time monitoring of 3 mock services, fault injection capabilities for chaos engineering, SLO tracking with latency P95 and availability targets, burn rate monitoring with visual indicators, and Prometheus metrics integration.",
    lang: [
      "Python",
      "React",
      "JavaScript",
      "Prometheus",
      "SLO/SLI",
      "Chaos Engineering",
      "Observability",
    ],
    img: "microserviceHB.png",
    link: "https://github.com/abdulrahman1121/microservice-healthboard",
    git: "https://github.com/abdulrahman1121/microservice-healthboard",
    problem:
      "Microservice architectures require sophisticated monitoring and observability tools to maintain system reliability. Teams need real-time visibility into service health, the ability to simulate failures for testing, and comprehensive SLO tracking to ensure service quality meets business requirements.",
    solution:
      "I built Microservice Healthboard as a comprehensive observability platform that addresses modern microservice monitoring challenges. The system provides real-time monitoring of multiple services, fault injection capabilities for chaos engineering, SLO tracking with burn rate monitoring, and Prometheus-compatible metrics. The interactive React dashboard allows teams to visualize system health, inject failures, and track error budgets in real-time.",
  },
  {
    name: "LiveSync",
    slug: "livesync",
    show: "Sports league schedule tracker displaying daily schedules for NFL, MLB, Premier League, and NBA",
    desc: "A comprehensive sports schedule tracking application that displays daily schedules for major sports leagues across different sports. Features real-time updates, interactive interface, and support for NFL, MLB, Premier League, and NBA. Built with React and Vite for optimal performance and responsive design across all devices.",
    lang: [
      "React",
      "Vite",
      "JavaScript",
      "CSS3",
      "Sports Data",
      "Responsive Design",
      "UI/UX",
    ],
    img: "livesync.png",
    link: "https://github.com/abdulrahman1121/LiveSync",
    git: "https://github.com/abdulrahman1121/LiveSync",
    problem:
      "Sports fans need a centralized way to track games and schedules across multiple leagues and sports. Existing solutions often focus on single leagues or lack real-time updates, making it difficult for fans to stay informed about all their favorite teams and leagues in one place.",
    solution:
      "I built LiveSync as a comprehensive sports schedule tracker that addresses the need for multi-league sports information. The application displays daily schedules for NFL, MLB, Premier League, and NBA, providing fans with a single platform to track all their favorite sports. Built with React and Vite, it features real-time updates, responsive design, and an intuitive interface that works seamlessly across desktop and mobile devices.",
  },
  {
    name: "Emergency Spotter",
    slug: "emergency-spotter",
    show: "Emergency reporting and mapping system with real-time location tracking and database queries",
    desc: "A comprehensive emergency reporting and mapping system that enables users to report emergencies with automatic location detection. Features Google Maps integration, real-time emergency tracking, comprehensive database queries, and transaction logic for population management. Built with React frontend and Express backend with MySQL database.",
    lang: [
      "React",
      "Express.js",
      "MySQL",
      "Google Maps API",
      "JavaScript",
      "Geolocation",
      "Database Design",
    ],
    img: "EmergencySpotter.png",
    link: "https://github.com/LeDuyhungC/Emergency-Spotter",
    git: "https://github.com/LeDuyhungC/Emergency-Spotter",
    problem:
      "Emergency response systems need efficient ways to collect, track, and analyze emergency reports. Traditional emergency reporting lacks real-time location tracking, comprehensive data analysis capabilities, and proper database management for emergency response coordination.",
    solution:
      "I collaborated with my team to build Emergency Spotter as a comprehensive emergency reporting and mapping system. The application features Google Maps integration for real-time location tracking, automatic emergency report submission with geolocation, and comprehensive database queries for emergency analysis. The system includes transaction logic for population management and provides multiple query capabilities for emergency data analysis and response coordination.",
  },
  {
    name: "Chat Application",
    slug: "chat-application",
    show: "Real-time chat application with backend and frontend for seamless messaging",
    desc: "A full-stack real-time chat application built with modern web technologies. Features instant messaging, user authentication, real-time message delivery, and responsive design. Built with separate backend and frontend components for scalable architecture and optimal performance.",
    lang: [
      "JavaScript",
      "Node.js",
      "Express",
      "Socket.io",
      "HTML/CSS",
      "Real-time",
      "Full-stack",
    ],
    img: "codeconnect.png",
    link: "https://github.com/abdulrahman1121/chat-application",
    git: "https://github.com/abdulrahman1121/chat-application",
    problem:
      "Users need efficient ways to communicate in real-time through web applications. Traditional messaging systems often lack real-time capabilities, proper user authentication, and responsive design that works across different devices and platforms.",
    solution:
      "I built a comprehensive chat application that addresses real-time communication needs. The system features instant messaging capabilities with Socket.io for real-time message delivery, user authentication for secure access, and a responsive design that works seamlessly across desktop and mobile devices. The full-stack architecture with separate backend and frontend ensures scalability and maintainability.",
  },
  {
    name: "TodoList App",
    slug: "todolist-app",
    show: "Interactive todo list application with task management and filtering capabilities",
    desc: "A clean and intuitive todo list application that helps users manage their daily tasks efficiently. Features task creation, completion tracking, filtering options (All, Completed, Uncompleted), and persistent storage. Built with vanilla JavaScript, HTML, and CSS for optimal performance and simplicity.",
    lang: [
      "JavaScript",
      "HTML5",
      "CSS3",
      "DOM Manipulation",
      "Local Storage",
      "Task Management",
      "Responsive Design",
    ],
    img: "todo.png",
    link: "https://abdulrahman1121.github.io/TodoList2/",
    git: "https://github.com/abdulrahman1121/TodoList2",
    problem:
      "People need simple and effective ways to organize their daily tasks and stay productive. Many todo applications are overly complex or lack essential features like task filtering and persistent storage, making it difficult for users to manage their tasks effectively.",
    solution:
      "I built a streamlined todo list application that focuses on simplicity and functionality. The app allows users to create, complete, and filter tasks with an intuitive interface. Features include task filtering (All, Completed, Uncompleted), persistent local storage, and a clean design that works across all devices. Built with vanilla JavaScript for optimal performance and reliability.",
  },
  {
    name: "Sentiment Analysis",
    slug: "sentiment-analysis",
    show: "AI-powered text sentiment analysis tool for understanding emotional context in written content",
    desc: "An advanced sentiment analysis application that uses machine learning and natural language processing to analyze text and determine emotional sentiment. Features real-time text analysis, sentiment scoring, emotion classification, and comprehensive reporting capabilities for understanding user feedback and content sentiment.",
    lang: [
      "Python",
      "Machine Learning",
      "NLP",
      "Sentiment Analysis",
      "Data Processing",
      "AI/ML",
      "Text Analytics",
    ],
    img: "sentiment2.png",
    link: "https://github.com/abdulrahman1121/sentiment-analysis",
    git: "https://github.com/abdulrahman1121/sentiment-analysis",
    problem:
      "Organizations and individuals need to understand the emotional context and sentiment of text content, whether it's customer feedback, social media posts, or written communications. Manual sentiment analysis is time-consuming and inconsistent, requiring automated solutions for accurate and scalable text analysis.",
    solution:
      "I built Sentiment Analysis as an AI-powered tool that addresses text analysis challenges. The application uses machine learning and natural language processing techniques to automatically analyze text and determine emotional sentiment. Features include real-time text analysis, sentiment scoring, emotion classification, and comprehensive reporting capabilities that help users understand the emotional context of written content for better decision-making.",
  },
];
